// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(uuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    oauth_token        String?
    oauth_token_secret String?
    refresh_token      String? @db.LongText
    access_token       String? @db.LongText
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.LongText
    session_state      String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                    String                  @id @default(cuid())
    name                  String?
    email                 String?                 @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    YouTubeChannelDetails YouTubeChannelDetails[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model YouTubeChannelDetails {
    id                      Int            @id @default(autoincrement())
    yt_channel_id           String         @unique
    yt_channel_title        String?
    yt_channel_customurl    String?
    yt_channel_thumbnails   String?
    yt_channel_published_at DateTime?
    user                    User           @relation(fields: [user_id], references: [id])
    user_id                 String
    subscriber_count        BigInt?
    video_count             BigInt?
    view_count              BigInt?
    YouTubeVideo            YouTubeVideo[]

    @@index([user_id])
}

model YouTubeVideo {
    id                   Int                    @id @default(autoincrement())
    yt_video_id          String                 @unique
    ytChannel            YouTubeChannelDetails? @relation(fields: [yt_channel_id], references: [yt_channel_id])
    yt_channel_id        String?
    yt_video_title       String                 @db.LongText
    yt_video_description String                 @db.LongText
    yt_video_thumbnail   String                 @db.LongText
    comment_count        BigInt
    like_count           BigInt
    view_count           BigInt
    YouTubeComments      YouTubeComments[]

    @@index([yt_channel_id])
}

model YouTubeComments {
    id            Int          @id @default(autoincrement())
    yt_comment_id String
    ytVideo       YouTubeVideo @relation(fields: [yt_video_id], references: [yt_video_id])
    yt_video_id   String
    yt_comment    String       @unique
    sentiment     String       @default("")

    @@index([yt_video_id])
}

model TestComments {
    id         Int    @id @default(autoincrement())
    comment_id String
    video_id   String
    comment    String
    sentiment  String @default("")

    @@index([video_id])
}
