// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(uuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    oauth_token        String?
    oauth_token_secret String?
    refresh_token      String? // @db.Text
    access_token       String? // @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? // @db.Text
    session_state      String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                    String                  @id @default(cuid())
    name                  String?
    email                 String?                 @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    posts                 Post[]
    YouTubeChannelDetails YouTubeChannelDetails[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model YouTubeChannelDetails {
    id                      String    @id @default(cuid())
    yt_channel_id           String    @unique
    yt_channel_title        String?
    yt_channel_thumbnails   String?
    yt_channel_customurl    String?
    yt_channel_published_at DateTime?
    user                    User      @relation(fields: [userId], references: [id])
    userId                  String
    access_token            String
    refresh_token           String
    id_token                String
    expiry_date             BigInt

    @@index([userId])
}
